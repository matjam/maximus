; COMPRESS.CFG contains entries for the various compression programs which
; you may wish to use with Squish and Maximus.  Each compression progrm
; should have its own separate entry, and each entry should begin with
; the text 'Archiver <name>', where <name> is a short name which can
; be used to refer to the archiver in SQUISH.CFG.
;
; IMPORTANT NOTE:  the order of the archiver entries within this file
; is VERY important.  The FIRST archiver specified will be used as
; a default, if no 'Pack' statement exists for any given node in
; SQUISH.CFG.
;
; However, when trying to unpack a compressed file, the list of
; archivers is scanned in a REVERSE order.  This is especially important
; in the case of ARC and PAK files, since PAK and ARC use the same
; identification character at the beginning of the file.  (The identity
; of a PAK-type file must be checked first, in case the file uses a PAK
; compression method, which PKArc and friends can't handle.)  This is
; why PAK is listed AFTER PKArc in the distribution control file.



; Phil Katz's PKPak program, in SEA compatibility mode

Archiver ARC

        ; The 'Extension' keyword tells Squish that archives of this
        ; flavour will commonly use the specified file extension.
        ; This isn't used for decompressing inbound mail packets, but
        ; Squish needs to know about it anyway.

        Extension       ARC

        ; Unless you are familiar with the internals of compression
        ; programs, the `Ident' keyword (see below) should not be
        ; modified.  Two numbers follow the keyword, each separated by
        ; a comma.  When attempting to decompress an archive of an
        ; unknown type, Max and Squish will use this informtion to
        ; automatically identify different types of archives.
        ;
        ; The first number after 'Ident' contains the OFFSET at which
        ; a special identifying marker can be located.  Positive
        ; entries work in the expected manner, whereas negative
        ; entries can be used to indicate offsets from the END of a
        ; compressed file.  However, an offset of "-2" is the LAST
        ; character, and an offset of "-3" is the SECOND-LAST
        ; character, etc.
        ;
        ; Following the OFFSET is a series of hexadecimal numbers
        ; which represent the text which can be found at the specified
        ; offset in the compressed mail bundle.  Each byte in the
        ; compressed file should be represented by the appropriate
        ; hexadecimal character.  For example, an uppercase 'A' can be
        ; represented with a '41', which is the ASCII code for 'A' (in
        ; hexadecimal).  Strings of characters may also be recognized
        ; by simply specifying more than one sequence of bytes.  (For
        ; an example, see the 'Ident' keyword for PKZip or ZOO.)

        Ident           0,1a

        ; The Add command tells Squish how to add a packet to an
        ; archive of the specified type.  This should be the normal
        ; 'add' command of your archiver, with one exception: the two
        ; special macros, "%a" and "%f", will be translated to the
        ; name of the archive and file to add (respectively).

DOS     Add             pkpak -oct a %a %f
OS2     Add             arc2 a5 %a %f

        ; The Extract command tells Squish how to remove packets from
        ; an archive of the specified type.  "%a" will be translated
        ; to the name of the archive, and "%f" will be translated to
        ; the name of the file to extract.  (The "%f" specification
        ; may be translated into a wildcard!)

DOS     Extract         pkunpak /r %a %f
OS2     Extract         arc2 xw %a %f

        ; The View command tells Squish how to get a listing of the
        ; contents of the specified archive.  As above, the "%a" will
        ; be translated into the name of the archive to process.  This
        ; command isn't currently used by Squish, but it may be used
        ; in the future.

DOS     View            pkpak v %a
OS2     View            arc2 l %a
UNIX	Add		/var/max/bin/arc a %a %f
UNIX	Extract		/var/max/bin/arc e %a
UNIX	View		/var/max/bin/arc v %a
End Archiver


; NoGate's PAK program

DOS Archiver PAK
DOS     Extension       PAK
DOS     Ident           -2,fe
DOS     Add             pak a %a %f
DOS     Extract         pak e /wn %a %f
DOS     View            pak v %a
DOS End Archiver

; Phil Katz's PKZip

Archiver ZIP
        Extension       ZIP
        Ident           0,504b0304                      ; "PK^c^d"
        Add             pkzip -a %a %f
        Extract         pkunzip -n %a %f
        View            pkzip -v %a
UNIX	View		/usr/bin/unzip -l %a
UNIX	Extract		/usr/bin/unzip -o %a
UNIX	Add		/usr/bin/zip -g %a %f
End Archiver

; Haruyasu Yoshizaki's LHarc program, in 1.13 compatibility mode

Archiver LH113
        Extension       LZH
        Ident           2,2d6c68                        ; "-lh"
DOS     Add             lha a /o /m %a %f
OS2     Add             lh a %a %f /c
DOS     Extract         lha e /m %a %f
OS2     Extract         lh x %a %f /o
DOS     View            lha l %a
OS2     View            lh v %a
UNIX	Add		/usr/bin/lha -go a %a %f
UNIX	Extract		/usr/bin/lha x %a -o
UNIX	View		/usr/bin/lha v %a
End Archiver

; Haruyasu Yoshizaki's LHarc program, in maximum compression mode

Archiver LHarc
        Extension       LZH
        Ident           2,2d6c68                        ; "-lh"
DOS     Add             lha a /m %a %f
OS2     Add             lh a %a %f
DOS     Extract         lha e /m %a %f
OS2     Extract         lh x %a %f /o
DOS     View            lha l %a
OS2     View            lh v %a
UNIX	Add		/usr/bin/lha -g a %a %f
UNIX	Extract		/usr/bin/lha x %a -o
UNIX	View		/usr/bin/lha v %a
End Archiver

; Rahul Dhesi's ZOO program

DOS Archiver ZOO
DOS     Extension       ZOO
DOS     Ident           0,5a4f4f                        ; "ZOO"
DOS     Add             zoo a: %a %f
DOS     Extract         zoo e:O %a %f
DOS     View            zoo v %a
DOS End Archiver

; Robert Jung's ARJ program
;
; If you're short on memory, add the "-m4" option to the "arj a" command.
; Doing so will make ARJ use about 64K less memory.

Archiver ARJ
        Extension       ARJ
        Ident           0,60ea
DOS     Add             arj a -e+ %a %f
DOS     Extract         arj e -n %a %f
DOS     View            arj l %a
OS2     Add             --- arj not supported under OS/2 ---
OS2     Extract         unarj e %a %f
OS2     View            unarj l %a
UNIX    Add             --- arj not supported under UNIX, either ---
UNIX    Extract         /var/max/bin/unarj e %a
UNIX    View            /var/max/bin/unarj l %a
End Archiver

